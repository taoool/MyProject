"""
1、把 web服务器 返回值固定内容拷贝
2、把原本固定的内容变为从数据库动态读取
1）导入pymysql模块
2）连接数据库，并且查询所有的影片信息
3）遍历查询的结果集，拼接响应的主题

发送给客户端

"""
import socket
import pymysql
import threading

def request_handler(new_client_socket, ip_port):
    """接受信息，并且做出响应"""
    # 接收客户端游览器发送的请求协议
    recv_data = new_client_socket.recv(1024)
    # 判断协议是否为空
    if not recv_data:
        print(f"{ip_port}客户端已下线！")
        new_client_socket.close()
        return
    # 拼接响应的报文
    # 响应行
    response_line = "HTTP/1.1 200 OK\r\n"
    # 响应头
    response_header = "server:pythonwb/3.4\r\n"
    response_header += "Content-type:text/html;charset=utf-8\r\n"
    # 响应空行
    response_blank = "\r\n"
    # 响应主题
    # response_body = "HelloWorld!"
    response_body = ''

    # 连接数据库，并且查询所有的影片信息
    conn = pymysql.connect(host="localhost", user="root", password="tao", database="movie_db")
    # 创建游标对象
    cur = conn.cursor()
    # 遍历查询的结果集，拼接响应的主题
    res = cur.execute("select * from movie_link")
    result = cur.fetchall()
    for row in result:
        response_body += "%d  %s    下载地址：[<a href = '%s'>%s</a>]  <br>" % (row[0], row[1], row[2], row[2])

    # 关闭操作
    cur.close()
    conn.close()

    # 拼接响应报文
    response_data = response_line + response_header + response_blank + response_body
    # 发送发送响应报文
    new_client_socket.send(response_data.encode())
    # 关闭当前连接
    new_client_socket.close()


def main():
    """主函数"""
    # 导入模块
    # 创建套接字
    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 设置地址重用
    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
    # 绑定端口
    tcp_server_socket.bind(("", 8081))
    # 设置监听，让套接字由主动变为被动接收
    tcp_server_socket.listen(128)
    while True:
        # 接受客户端连接 定义函数 request_handler()
        new_client_socket, ip_port = tcp_server_socket.accept()
        print("欢迎新客户：", ip_port)
        # 调用功能函数处理请求并且响应
        # request_handler(new_client_socket, ip_port)
        t1 = threading.Thread(target=request_handler, args=(new_client_socket, ip_port))
        t1.setDaemon(True)
        t1.start()

    # 关闭操作
    # tcp_server_socket.close()


if __name__ == '__main__':
    main()
